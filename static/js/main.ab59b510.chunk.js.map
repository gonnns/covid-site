{"version":3,"sources":["constants/ApiConstant.js","store/covidSlice.js","components/Days.tsx","components/Today.tsx","layout/Content.tsx","layout/Header.tsx","App.tsx","store/index.js","index.tsx"],"names":["API","SUMMARY","DAYS","opts","country","covidSlice","createSlice","name","initialState","reducers","changeCountry","state","action","payload","actions","selectCountry","createSelector","covid","Div","styled","div","Days","useSelector","useState","setCovid","loadToday","target","a","axios","get","response","data","useEffect","echarts","TitleComponent","TooltipComponent","GridComponent","LineChart","CanvasRenderer","options","tooltip","show","xAxis","type","yAxis","series","map","item","Date","Active","option","notMerge","lazyUpdate","onChartReady","instance","console","log","Today","loadSummary","BarChart","Countries","Country","NewConfirmed","Content","exact","path","component","HeaderStyled","header","NavStyled","Header","dispatch","useDispatch","to","onChange","event","value","App","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.ab59b510.chunk.js","sourcesContent":["const API = {\r\n  SUMMARY: () => `https://api.covid19api.com/summary`,\r\n  DAYS: (opts) => `https://api.covid19api.com/total/dayone/country/${opts.country}`,\r\n};\r\n\r\nexport default API;\r\n","import { createSlice, createSelector } from '@reduxjs/toolkit';\r\n\r\nconst covidSlice = createSlice({\r\n  name: 'covid',\r\n  initialState: {\r\n    country: 'kr',\r\n  },\r\n  reducers: {\r\n    changeCountry: (state, action) => {\r\n      state.country = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nconst getCountry = (state) => state.covid.country;\r\n\r\nexport const { changeCountry } = covidSlice.actions;\r\n\r\nexport const selectCountry = createSelector([getCountry], (country) => {\r\n  return country;\r\n});\r\n\r\nexport default covidSlice.reducer;\r\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\r\nimport * as echarts from 'echarts/core';\r\nimport { LineChart } from 'echarts/charts';\r\nimport { GridComponent, TitleComponent, TooltipComponent } from 'echarts/components';\r\n\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { EChartsInstance, EChartsOption } from 'echarts-for-react';\r\n\r\nimport API from '../constants/ApiConstant';\r\nimport { CovidStatus } from '../interface/CovidStatus';\r\nimport { selectCountry } from '../store/covidSlice';\r\n\r\nconst Div = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction Days() {\r\n  const country = useSelector(selectCountry);\r\n  const [covid, setCovid] = useState<CovidStatus[]>([]);\r\n\r\n  const loadToday = async (target: string) => {\r\n    const response = await axios.get(API.DAYS({ country: target }));\r\n    setCovid(response.data);\r\n  };\r\n\r\n  // Init\r\n  useEffect(() => {\r\n    loadToday(country);\r\n  }, [country]);\r\n\r\n  echarts.use([TitleComponent, TooltipComponent, GridComponent, LineChart, CanvasRenderer]);\r\n\r\n  const options: EChartsOption = {\r\n    tooltip: { show: true },\r\n    xAxis: {\r\n      type: 'time',\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Covid Today',\r\n        type: 'line',\r\n        data: covid.map((item) => [item.Date, item.Active]),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const onChartReady = (instance: EChartsInstance) => {\r\n    console.log(instance);\r\n  };\r\n\r\n  return (\r\n    <Div>\r\n      <ReactEChartsCore echarts={echarts} option={options} notMerge lazyUpdate onChartReady={onChartReady} />\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default Days;\r\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\r\nimport * as echarts from 'echarts/core';\r\nimport { BarChart } from 'echarts/charts';\r\nimport { GridComponent, TitleComponent, TooltipComponent } from 'echarts/components';\r\n\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { EChartsInstance, EChartsOption } from 'echarts-for-react';\r\n\r\nimport API from '../constants/ApiConstant';\r\nimport { Summary } from '../interface/Summary';\r\n\r\nconst Div = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction Today() {\r\n  const [covid, setCovid] = useState<Summary>(null);\r\n\r\n  const loadSummary = async () => {\r\n    const response = await axios.get(API.SUMMARY());\r\n    setCovid(response.data);\r\n  };\r\n\r\n  // Init\r\n  useEffect(() => {\r\n    loadSummary();\r\n  }, []);\r\n\r\n  echarts.use([TitleComponent, TooltipComponent, GridComponent, BarChart, CanvasRenderer]);\r\n\r\n  const options: EChartsOption = {\r\n    tooltip: { show: true },\r\n    xAxis: {\r\n      type: 'category',\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Covid Today',\r\n        type: 'bar',\r\n        data: covid ? covid.Countries.map((item) => [item.Country, item.NewConfirmed]) : [],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const onChartReady = (instance: EChartsInstance) => {\r\n    console.log(instance);\r\n  };\r\n\r\n  return (\r\n    <Div>\r\n      <ReactEChartsCore echarts={echarts} option={options} notMerge lazyUpdate onChartReady={onChartReady} />\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default Today;\r\n","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Days from '../components/Days';\r\nimport Today from '../components/Today';\r\n\r\nfunction Content() {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Today} />\r\n      <Route path=\"/days\" component={Days} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { changeCountry, selectCountry } from '../store/covidSlice';\r\n\r\nconst HeaderStyled = styled.header`\r\n  height: 50px;\r\n  background-color: aqua;\r\n  display: flex;\r\n  padding: 1rem 1rem;\r\n  justify-content: space-between;\r\n\r\n  align-items: center;\r\n\r\n  & select {\r\n    height: 30px;\r\n    width: 150px;\r\n    border-radius: 5px;\r\n    border: 0;\r\n  }\r\n`;\r\n\r\nconst NavStyled = styled.div`\r\n  display: flex;\r\n  justify-content: end;\r\n  & a {\r\n    padding: 0 0.5rem;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nfunction Header() {\r\n  const dispatch = useDispatch();\r\n  const country = useSelector(selectCountry);\r\n\r\n  const onChangeCountry = (event: any) => {\r\n    dispatch(changeCountry(event.target.value));\r\n  };\r\n\r\n  return (\r\n    <HeaderStyled>\r\n      <h1>COVID-19</h1>\r\n      <NavStyled>\r\n        <Link to=\"/\">세계 현황</Link>\r\n        <Link to=\"/days\">나라별 누적 현황</Link>\r\n      </NavStyled>\r\n      <select onChange={onChangeCountry} value={country}>\r\n        <option value=\"kr\">한국</option>\r\n        <option value=\"us\">미국</option>\r\n      </select>\r\n    </HeaderStyled>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Content from './layout/Content';\nimport Header from './layout/Header';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Content />\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport covid from './covidSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    covid,\r\n  },\r\n});\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}